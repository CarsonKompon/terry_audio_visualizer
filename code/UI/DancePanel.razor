@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="buttons">
		<i class="btn" onclick=@SettingsButtonPressed>settings</i>
		<i class="btn" onclick=@PlayPauseButtonPressed>@(MusicManager.IsPaused ? "play_arrow" : "pause")</i>
		<div class="search">
			<i>language</i>
			<TextEntry @ref="UrlEntry" Placeholder="Enter a song URL (Youtube or Direct MP3/MP4/OGG/WAV)" onsubmit=@SubmitUrl />
		</div>
	</div>
	@if(SettingsOpen)
	{
		<div class="settings">

			<h1><i>volume_up</i>Audio Settings</h1>
			<div class="setting">
				<i>bar_chart</i>
				<p>Peak Threshold</p>
				<div class="peak-slider">
					<SliderControl Value:bind=@MusicManager.PeakThreshold Min=@(0f) Max=@(3f) Step=@(0.001f) />
					<div class="peak-fill" style="width: @(MathF.Min(MathX.Remap(MusicManager.Energy, 0f, 3f, 0f, 1f), 1f) * 100)%; @(MusicManager.IsPeaking ? "background-color: lime;" : "background-color: white;") "></div>
					<div class="peak-fill target" style="width: @(MathF.Min(MathX.Remap(MusicManager.EnergyHistoryAverage + MusicManager.AdjustedPeakThreshold, 0f, 3f, 0f, 1f), 1f) * 100)%"></div>
				</div>
			</div>

			<h1><i>videocam</i>Camera Settings</h1>
			<div class="setting">
				<i>details</i>
				<p>Sharpen</p>
				<SliderControl Value:bind=@Sharpen.Scale Min=@(0) Max=@(5f) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>flare</i>
				<p>Bloom</p>
				<SliderControl Value:bind=@Bloom.Strength Min=@(0) Max=@(10f) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>apps</i>
				<p>Pixelate</p>
				<SliderControl Value:bind=@Pixelate.Scale Min=@(0) Max=@(1f) Step=@(0.001f) />
			</div>

			<h1><i>graphic_eq</i>Visualizer Ring</h1>
			<div class="setting">
				<i>music_note</i>
				<p>Reactivity</p>
				<SliderControl Value:bind=@BarManager.Amplitude Min=@(0) Max=@(2) Step=@(0.001f) />
			</div>
			<div class="setting">
				<i>fit_screen</i>
				<p>Ring Radius</p>
				<SliderControl Value:bind=@BarManager.RingRadius Min=@(125) Max=@(1000) Step=@(1) />
			</div>
			<div class="setting">
				<i>aspect_ratio</i>
				<p>Bar Width</p>
				<SliderControl Value:bind=@BarManager.BarWidth Min=@(0) Max=@(0.2f) Step=@(0.001f) />
			</div>
			<div class="setting">
				<i>view_week</i>
				<p>Bar Count</p>
				<SliderControl Value:bind=@BarManager.BarCount Min=@(32) Max=@(512) Step=@(64) />
			</div>
			<div class="setting">
				<i>all_inclusive</i>
				<p>Wavyness</p>
				<SliderControl Value:bind=@BarManager.BarWavyness Min=@(0) Max=@(8) Step=@(1) />
			</div>
			<div class="setting">
				<i>waves</i>
				<p>Wave Speed</p>
				<SliderControl Value:bind=@BarManager.WaveSpeed Min=@(0) Max=@(10) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>height</i>
				<p>Wave Amplitude</p>
				<SliderControl Value:bind=@BarManager.BarWavynessAmplitude Min=@(0) Max=@(64) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>undo</i>
				<p>Spin Amount</p>
				<SliderControl Value:bind=@BarManager.SpinOnBeat Min=@(-64) Max=@(64) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>360</i>
				<p>Rotate Speed</p>
				<SliderControl Value:bind=@BarRotator.RotateSpeed Min=@(-64) Max=@(64) Step=@(0.01f) />
			</div>

			<h1><i>bar_chart</i>Energy Bars</h1>
			<div class="setting">
				<i>aspect_ratio</i>
				<p>Bar Width</p>
				<SliderControl Value:bind=@EnergyBarWidth Min=@(0) Max=@(0.3f) Step=@(0.001f) />
			</div>
			<div class="setting">
				<i>height</i>
				<p>Bar Amplitude</p>
				<SliderControl Value:bind=@EnergyBarHeight Min=@(0.01f) Max=@(10f) Step=@(0.01f) />
			</div>

			<h1><i>apps</i>Dance Pad</h1>
			<div class="setting">
				<i>music_note</i>
				<p>Reactivity</p>
				<SliderControl Value:bind=@DancePad.Reactivity Min=@(0) Max=@(1f) Step=@(0.001f) />
			</div>
			<div class="setting">
				<i>height</i>
				<p>Amplitude</p>
				<SliderControl Value:bind=@DancePad.Amplitude Min=@(0f) Max=@(32f) Step=@(0.01f) />
			</div>
			<div class="setting">
				<i>all_inclusive</i>
				<p>Wavyness</p>
				<SliderControl Value:bind=@DancePad.Wavyness Min=@(0f) Max=@(2f) Step=@(0.01f) />
			</div>

		</div>
	}

	@if(!string.IsNullOrEmpty(MusicManager.CurrentlyPlaying))
	{
		<div class="currently-playing">
			<i>headphones</i>
			<p>@MusicManager.CurrentlyPlaying</p>
		</div>
	}
</root>

@code
{
	[Property] public MusicManager MusicManager { get; set; }
	[Property] public VisualizerBarManager BarManager { get; set; }
	[Property] public BarRotator BarRotator { get; set; }
	[Property] public Sharpen Sharpen { get; set; }
	[Property] public Bloom Bloom { get; set; }
	[Property] public Pixelate Pixelate { get; set; }
	[Property] public DancePadGridManager DancePad { get; set; }

	TextEntry UrlEntry;
	List<VisualizerReactor> Bars = new();
	bool SettingsOpen = false;

	float EnergyBarWidth
	{
		get => energyBarWidth;
		set
		{
			energyBarWidth = value;
			foreach(var bar in Bars)
			{
				bar.StartingScale = new Vector3(value, value, bar.StartingScale.z);
			}
		}
	
	}
	float energyBarWidth = 0.2f;

	float EnergyBarHeight
	{
		get => energyBarHeight;
		set
		{
			energyBarHeight = value;
			foreach(var bar in Bars)
			{
				bar.ScaleFactor = bar.ScaleFactor.WithZ(value);
				bar.PositionFactor = bar.PositionFactor.WithZ(value * 25f);
			}
		}
	}
	float energyBarHeight = 2f;

	protected override void OnStart()
	{
		Bars.Clear();
		foreach(var reactor in Scene.Components.GetAll<VisualizerReactor>(FindMode.EverythingInSelfAndDescendants))
		{
			if(reactor.Tags.Has("bar"))
			{
				Bars.Add(reactor);
			}
		}
	}

	void SettingsButtonPressed()
	{
		SettingsOpen = !SettingsOpen;
	}

	void PlayPauseButtonPressed()
	{
		if(MusicManager.IsPaused)
		{
			MusicManager.Play();
		}
		else
		{
			MusicManager.Pause();
		}
	}

	void SubmitUrl()
	{
		MusicManager.Play(UrlEntry.Text);
		UrlEntry.Text = "";
	}

	protected override int BuildHash() => HashCode.Combine( SettingsOpen ? MusicManager.Energy : 0f, MusicManager.CurrentlyPlaying, MusicManager.IsPlaying );
}